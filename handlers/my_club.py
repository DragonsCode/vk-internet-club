from vkbottle.bot import BotLabeler, Message, rules
from vkbottle import Keyboard, Text, OpenLink, KeyboardButtonColor, EMPTY_KEYBOARD

from datetime import datetime

from config import state_dispenser, api
from database.database import get_user, get_server_by_country, get_server, insert_user, update_user, update_server
from functions.vpn import new_key, del_key
from states import ChangedServerData, InstructionsData, ctx


my_club_labeler = BotLabeler()
my_club_labeler.vbml_ignore_case = True
my_club_labeler.auto_rules = [rules.PeerRule(from_chat=False)]



@my_club_labeler.private_message(text="‚öô–°–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
@my_club_labeler.private_message(payload={'club': 'change'})
async def change(message: Message):
    keyboard = Keyboard()
    servers = get_server(is_open=True)
    countries = []
    user = get_user(message.peer_id)

    if not servers:
            await message.answer('‚ùå–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π')
            return

    k = len(servers) - 1
    if user.server is not None:
        countries.append(user.server)
        k -= 1

    for i in servers:
        if i.name not in countries and i.name != user.server:
            countries.append(i.name)
            keyboard.add(Text(f'{i.flag} {i.name} - {i.slots} —Å–ª–æ—Ç–æ–≤', {'change': 'server'}))
            if k > 0:
                keyboard.row()
                k -= 1

    if not countries:
            await message.answer('‚ùå–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π')
            return
    
    await message.answer('‚ùì–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∂–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞—à –∫–ª—É–± –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞', keyboard=keyboard)


@my_club_labeler.private_message(text=["–ú–æ–π –∫–ª—É–±", "üîÆ–ú–æ–π –∫–ª—É–±"])
@my_club_labeler.private_message(payload={'cmd': 'club'})
async def my_club_handler(message: Message):
    user = get_user(message.peer_id)
    if not user:
        insert_user(message.peer_id)
        user = get_user(message.peer_id)
    sub = user.end_date
    s = None
    if sub is not None:
        s = user.end_date > datetime.now()
    if s:
        server = user.flag + ' ' + user.server if user.server is not None else False

        if not server:
            await change(message)
            return

        date = sub.strftime('%Y.%m.%d')

        keyboard = Keyboard(inline=True)
        keyboard.add(Text('üì¶–¢–æ–∫–µ–Ω –∫–ª—É–±–∞', {'club': 'token'}))
        keyboard.row()
        keyboard.add(Text('‚öô–°–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä', {'club': 'change'}))
        keyboard.row()
        keyboard.add(Text('üìÉ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', {'club': 'instruction'}))
        keyboard.row()
        keyboard.add(OpenLink('https://vk.me/homa_nobi', 'üÜò–ü–æ–º–æ—â—å'))

        await message.answer(f"‚úÖ–í–∞—à –∫–ª—É–± –∞–∫—Ç–∏–≤–µ–Ω –¥–æ ¬´{date}¬ª\n\nüíª–°–µ—Ä–≤–µ—Ä –∫–ª—É–±–∞ - {server}", keyboard=keyboard)

    else:
        keyboard = Keyboard(inline=True)
        keyboard.add(Text('–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'), color=KeyboardButtonColor.POSITIVE)
        keyboard.row()
        keyboard.add(Text('–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'), color=KeyboardButtonColor.PRIMARY)
        keyboard.row()
        keyboard.add(OpenLink('https://vk.me/homa_nobi', 'üÜò–ü–æ–º–æ—â—å'))

        await message.answer('üòî–ü–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–ª—É–±–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n\nüëÄ–¢–æ–ª—å–∫–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n\nüëâüèª–î–æ—Å—Ç—É–ø –∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º —Å–∞–π—Ç–∞–º (Canva, Instagram)\nüëâüèª–í—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã\nüëâüèª–°–∫—Ä—ã—Ç–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è\nüëâüèª100% –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n\nüí°–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:', keyboard=keyboard)


@my_club_labeler.private_message(text="üì¶–¢–æ–∫–µ–Ω –∫–ª—É–±–∞")
@my_club_labeler.private_message(payload={'club': 'token'})
async def club_token(message: Message):
    keyboard = Keyboard(inline=True)
    keyboard.add(Text('üìÉ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', {'club': 'instruction'}))
    user = get_user(message.peer_id)
    token = user.access
    await message.answer('‚úÖ–í—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∏–∂–µ —Ç–æ–∫–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline, –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –∫–ª—É–±—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!', keyboard=keyboard)
    await message.answer(f'{token}')


@my_club_labeler.private_message(payload={'change': 'server'})
async def change_server(message: Message):
    ctx.set(message.peer_id, {})
    await state_dispenser.set(message.peer_id, ChangedServerData.SERVER)

    flag = message.text.split(' - ')[0]
    country = flag.split(' ')

    data = ctx.get(message.peer_id)
    data['server'] = country[1]
    data['flag'] = flag
    ctx.set(message.peer_id, data)

    keyboard = Keyboard()
    keyboard.add(Text('üöÄ–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω'))

    await message.answer(f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ —Å–≤–æ–π –∫–ª—É–± –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤ {flag}.\n\nüí°–í—ã —Å–º–µ–Ω–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é, –ø–æ—ç—Ç–æ–º—É –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–æ–∫–µ–Ω –∫–ª—É–±–∞\n\nüí´–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø', keyboard=keyboard)


@my_club_labeler.private_message(state=ChangedServerData.SERVER)
async def new_token(message: Message):
    if message.text == 'üöÄ–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω':
        data = ctx.get(message.peer_id)
        country = data['server']
        server = get_server_by_country(country)
        url = server.token
        bot_user = await api.users.get(message.peer_id)
        user = get_user(message.peer_id)

        if user.url is not None:
            old_server = get_server(user.url)[0]
            del_key(user.url, user.token)
            update_server(user.url, old_server.name, old_server.flag, old_server.slots+1)
        
        key = new_key(url, f'{bot_user[0].first_name} {bot_user[0].last_name}')
        update_user(message.peer_id, server.name, server.flag, url, key[0], key[1], user.refs, user.ref_balance, user.referal, user.balance, user.is_admin, user.end_date)
        update_server(url, server.name, server.flag, server.slots-1)

        await message.answer('‚úÖ–í—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∏–∂–µ —Ç–æ–∫–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline, –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –∫–ª—É–±—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!', keyboard=EMPTY_KEYBOARD)
        await message.answer(f'{key[1]}')

        await state_dispenser.delete(message.peer_id)
        ctx.set(message.peer_id, {})
    else:
        keyboard = Keyboard()
        keyboard.add(Text('üöÄ–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω'))
        
        await message.answer('–ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.', keyboard=keyboard)


@my_club_labeler.private_message(text="üìÉ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
@my_club_labeler.private_message(payload={'club': 'instruction'})
async def instructions(message: Message):
    ctx.set(message.peer_id, {})
    await state_dispenser.set(message.peer_id, InstructionsData.PLATFORM)

    platforms = ['Android', 'IOS', 'Windows', 'Mac']

    keyboard = Keyboard(inline=True)
    
    for i in platforms:
        keyboard.add(Text(i))
        if i == 'IOS':
            keyboard.row()
        
    await message.answer('üìù–î–ª—è –Ω–∞—á–∞–ª–∞, –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:', keyboard=keyboard)