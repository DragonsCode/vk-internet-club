from vkbottle.bot import BotLabeler, Message, rules
from vkbottle import Keyboard, Text, KeyboardButtonColor, EMPTY_KEYBOARD

from config import api, state_dispenser, ADMIN_CHAT
from states import ChangedServerData, ctx


my_club_labeler = BotLabeler()
my_club_labeler.vbml_ignore_case = True
my_club_labeler.auto_rules = [rules.PeerRule(from_chat=False)]


@my_club_labeler.private_message(text="/mc")
@my_club_labeler.private_message(payload={'cmd': 'club'})
async def my_club_handler(message: Message):
    sub = 1
    if sub:
        keyboard = Keyboard(inline=True)
        keyboard.add(Text('–¢–æ–∫–µ–Ω –∫–ª—É–±–∞', {'club': 'token'}))
        keyboard.row()
        keyboard.add(Text('–°–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä', {'club': 'change'}))
        keyboard.row()
        keyboard.add(Text('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', {'club': 'instruction'}))

        await message.answer("–í–∞—à –∫–ª—É–± –∞–∫—Ç–∏–≤–µ–Ω –¥–æ\n\n–°–µ—Ä–≤–µ—Ä –∫–ª—É–±–∞ - ", keyboard=keyboard)

    else:
        keyboard = Keyboard(inline=True)
        keyboard.add(Text('–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'), color=KeyboardButtonColor.POSITIVE)
        keyboard.row()
        keyboard.add(Text('–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'), color=KeyboardButtonColor.PRIMARY)

        await message.answer('üòî–ü–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–ª—É–±–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n\nüëÄ–¢–æ–ª—å–∫–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n\nüëâüèª–î–æ—Å—Ç—É–ø –∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º —Å–∞–π—Ç–∞–º (Canva, Instagram)\nüëâüèª–í—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã\nüëâüèª–°–∫—Ä—ã—Ç–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è\nüëâüèª100% –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n\nüí°–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:', keyboard=keyboard)


@my_club_labeler.private_message(text="–¢–æ–∫–µ–Ω –∫–ª—É–±–∞")
@my_club_labeler.private_message(payload={'club': 'token'})
async def club_token(message: Message):
    await message.answer('–í—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∏–∂–µ —Ç–æ–∫–µ–Ω')
    await message.answer('–¢–æ–∫–µ–Ω: token')


@my_club_labeler.private_message(text="–°–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
@my_club_labeler.private_message(payload={'club': 'change'})
async def change(message: Message):
    keyboard = Keyboard()
    #TODO: Get servers with free slots from db
    servers = [('flag', 'country', 'slots')]
    for i in servers:
        keyboard.add(Text(f'{i[0]}{i[1]} - {i[2]} —Å–ª–æ—Ç–æ–≤', {'change': 'server'}))
    
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä', keyboard=keyboard)


@my_club_labeler.private_message(payload={'change': 'server'})
async def change_server(message: Message):
    ctx.set(message.peer_id, {})
    await state_dispenser.set(message.peer_id, ChangedServerData.SERVER)

    country = message.text.split(' - ')[0][1:]

    data = ctx.get(message.peer_id)
    data['server'] = country
    ctx.set(message.peer_id, data)

    keyboard = Keyboard()
    keyboard.add(Text('–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω'))

    await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏—Å—å', keyboard=keyboard)


@my_club_labeler.private_message(state=ChangedServerData.SERVER)
async def new_token(message: Message):
    if message.text == '–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω':
        data = ctx.get(message.peer_id)
        server = data['server']
        #TODO: Generate token
        await message.answer(f'{server}! –í—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∏–∂–µ —Ç–æ–∫–µ–Ω', keyboard=EMPTY_KEYBOARD)
        await message.answer('–¢–æ–∫–µ–Ω: token')

        await state_dispenser.delete(message.peer_id)
        ctx.set(message.peer_id, {})
    else:
        keyboard = Keyboard()
        keyboard.add(Text('–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω'))
        
        await message.answer('–ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω', keyboard=keyboard)


@my_club_labeler.private_message(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
@my_club_labeler.private_message(payload={'club': 'instruction'})
async def instructions(message: Message):
    await message.answer('Instructions')