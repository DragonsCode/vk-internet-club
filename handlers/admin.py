from datetime import datetime, timedelta

from vkbottle.bot import BotLabeler, Message, rules
from vkbottle import Keyboard, Text

from config import api, state_dispenser, ADMIN_CHAT
from states import ctx, InstructionsData
from database.database import insert_server, get_user, update_user


admin_labeler = BotLabeler()
admin_labeler.vbml_ignore_case = True
admin_labeler.auto_rules = [rules.PeerRule(from_chat=True)]


async def give_sub(user_id, days, msg_adm, msg_usr):
    user = get_user(user_id)
    end_date = datetime.now() + timedelta(days=days)
    is_new = 1
    if user.end_date is not None:
        if user.end_date > datetime.now():
            is_new = 0
            end_date = user.end_date + timedelta(days=days)
    update_user(user_id, user.server, user.flag, user.url, user.token, user.access, user.refs, user.ref_balance, user.referal, user.balance, user.is_admin, end_date)

    if is_new:
        ctx.set(user_id, {})
        await state_dispenser.set(user_id, InstructionsData.SERVER)

        keyboard = Keyboard(inline=True)
        keyboard.add(Text('–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è!'))
        
        await api.messages.send(
            peer_id=user_id,
            message='‚úÖ–û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª—É—á–∏–ª –æ–ø–ª–∞—Ç—É\n\nüìå–í—ã –≤—Å–µ–≥–æ –≤ –ø–∞—Ä–µ —à–∞–≥–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–∞—à–µ–º—É –ö–ª—É–±—É –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞',
            keyboard=keyboard,
            random_id=0
        )
    
    else:
        await api.messages.send(
            peer_id=user_id,
            message=msg_usr,
            random_id=0
        )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω —á–∞—Ç—É
    await api.messages.send(
        peer_id=ADMIN_CHAT,
        message=msg_adm,
        random_id=0
    )


@admin_labeler.chat_message(text=['[club211717723|@intervpn] –ü—Ä–∏–Ω—è—Ç—å <id>', '[club211717723|@intervpn] –ü—Ä–∏–Ω—è—Ç—å'], peer_ids=ADMIN_CHAT)
# @admin_labeler.chat_message(payload={'ok': 'yes'})
async def check_year_yes(message: Message, id=None):
    payload = message.get_payload_json()
    if payload is None:
        await message.answer('–ì–¥–µ –∞–π–¥–∏?')
    else:
        id = payload['user_id']
        await give_sub(id, 365, f'[id{id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –ø–æ–ª—É—á–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 365 –¥–Ω–µ–π', '–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞')


@admin_labeler.chat_message(text=['[club211717723|@intervpn] –û—Ç–∫–ª–æ–Ω–∏—Ç—å <id>', '[club211717723|@intervpn] –û—Ç–∫–ª–æ–Ω–∏—Ç—å'], peer_ids=ADMIN_CHAT)
# @admin_labeler.chat_message(payload={'ok': 'no'})
async def check_year_no(message: Message, id=None):
    payload = message.get_payload_json()
    if payload is None:
        await message.answer('–ì–¥–µ –∞–π–¥–∏?')
    else:
        id = payload['user_id']
        user = await api.users.get(id)
        await message.answer(f'[id{id}|{user[0].first_name} {user[0].last_name}] –Ω–µ –ø—Ä–∏–Ω—è—Ç')
        await api.messages.send(
            peer_id=int(id),
            message='–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            random_id=0
        )


@admin_labeler.chat_message(text=['/addserver <name> <flag> <token> <num>', '/addserver'], peer_ids=ADMIN_CHAT)
async def addserver(message: Message, name=None, flag=None, token=None, num=None):
    if flag is None or token is None or num is None:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ: /addserver <—Å—Ç—Ä–∞–Ω–∞> <—Ñ–ª–∞–≥> <—Ç–æ–∫–µ–Ω> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
    else:
        if num.isdigit():
            if int(num) >= 1:
                insert_server(name, flag, token, num)
                await message.answer('–°–µ—Ä–≤–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
            else:
                await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
        else:
            await message.answer('–í—ã –Ω–µ –≤—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç—Ç–æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ 0')


@admin_labeler.chat_message(text=['/sub <num> <date> <link>', '/sub'], peer_ids=ADMIN_CHAT)
async def addsub(message: Message, num=None, date=None, link=None):
    if num is None or date is None or link is None:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ: !sub <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–≤—Ä–µ–º—è> <—Å—Å—ã–ª–∫–∞>\
            \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0\
            \n–í—Ä–µ–º—è:\
            \ns - –¥–ª—è –ª–∏—à–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (—É–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 1)\
            \nd - –¥–µ–Ω—å\
            \nw - –Ω–µ–¥–µ–ª—è\
            \nm - –º–µ—Å—è—Ü\
            \ny - –≥–æ–¥')
    else:
        if num.isdigit():
            num = int(num)

            if num >= 1 and date in ['s', 'd', 'w', 'm', 'y']:
                get_link = link.split('vk.com/')[1]
                link = get_link[2:] if get_link[:2] == 'id' and get_link[2:].isdigit() else get_link
                users = await api.users.get(link)
                id = users[0].id
                user = get_user(id)

                if not user:
                    await message.answer(f'[id{id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞')

                if date == 's':
                    update_user(user.user_id, None, None, None, None, None, user.refs, user.ref_balance, user.referal, user.balance, user.is_admin, datetime(1, 1, 1))
                    await message.answer(f'[id{id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –ª–∏—à–∏–ª—Å—è –ø–æ–¥–ø–∏—Å–∫–∏')
                    await api.messages.send(
                        peer_id=id,
                        message='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ª–∏—à–∏–ª –≤–∞—Å –ø–æ–¥–ø–∏—Å–∫–∏!',
                        random_id=0
                    )
                    return
                
                days = num if date == 'd' else num * 7 if date == 'w' else num * 30 if date == 'm' else num * 365 if date == 'y' else num
                await give_sub(id, days, f'[id{id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –ø–æ–ª—É—á–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {days} –¥–Ω–µ–π', f'–í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π')

            else:
                await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
        else:
            await message.answer('–í—ã –Ω–µ –≤—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∫ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ 0')