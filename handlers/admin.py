from datetime import datetime, timedelta

from vkbottle.bot import BotLabeler, Message, rules
from vkbottle import Keyboard, Text

from config import api, state_dispenser, ADMIN_CHAT
from states import ctx, InstructionsData
from database.database import insert_server, get_user, update_user


admin_labeler = BotLabeler()
admin_labeler.vbml_ignore_case = True
admin_labeler.auto_rules = [rules.PeerRule(from_chat=True)]


@admin_labeler.chat_message(text=['[club211717723|@intervpn] –ü—Ä–∏–Ω—è—Ç—å <id>', '[club211717723|@intervpn] –ü—Ä–∏–Ω—è—Ç—å'], peer_ids=ADMIN_CHAT)
# @admin_labeler.chat_message(payload={'ok': 'yes'})
async def check_year_yes(message: Message, id=None):
    payload = message.get_payload_json()
    if payload is None:
        await message.answer('–ì–¥–µ –∞–π–¥–∏?')
    else:
        id = payload['user_id']
        user = get_user(id)
        end_date = datetime.now() + timedelta(days=365)
        is_new = 1
        if user.end_date is not None:
            if user.end_date > datetime.now():
                is_new = 0
                end_date = user.end_date + timedelta(days=365)
        update_user(id, user.server, user.flag, user.url, user.token, user.access, user.refs, user.ref_balance, user.referal, user.balance, user.is_admin, end_date)

        user = await api.users.get(id)
        await message.answer(f'[id{id}|{user[0].first_name} {user[0].last_name}] –ø—Ä–∏–Ω—è—Ç')

        if is_new:
            ctx.set(int(id), {})
            await state_dispenser.set(int(id), InstructionsData.SERVER)

            keyboard = Keyboard(inline=True)
            keyboard.add(Text('–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è!'))
            
            await api.messages.send(
                peer_id=int(id),
                message='‚úÖ–û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª—É—á–∏–ª –æ–ø–ª–∞—Ç—É\n\nüìå–í—ã –≤—Å–µ–≥–æ –≤ –ø–∞—Ä–µ —à–∞–≥–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–∞—à–µ–º—É –ö–ª—É–±—É –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞',
                keyboard=keyboard,
                random_id=0
            )
        else:
            await api.messages.send(
                peer_id=int(id),
                message='–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞',
                random_id=0
            )


@admin_labeler.chat_message(text=['[club211717723|@intervpn] –û—Ç–∫–ª–æ–Ω–∏—Ç—å <id>', '[club211717723|@intervpn] –û—Ç–∫–ª–æ–Ω–∏—Ç—å'], peer_ids=ADMIN_CHAT)
# @admin_labeler.chat_message(payload={'ok': 'no'})
async def check_year_no(message: Message, id=None):
    payload = message.get_payload_json()
    if payload is None:
        await message.answer('–ì–¥–µ –∞–π–¥–∏?')
    else:
        id = payload['user_id']
        user = await api.users.get(id)
        await message.answer(f'[id{id}|{user[0].first_name} {user[0].last_name}] –Ω–µ –ø—Ä–∏–Ω—è—Ç')
        await api.messages.send(
            peer_id=int(id),
            message='–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            random_id=0
        )


@admin_labeler.chat_message(text=['/addserver <name> <flag> <token> <num>', '/addserver'], peer_ids=ADMIN_CHAT)
async def addserver(message: Message, name=None, flag=None, token=None, num=None):
    if flag is None or token is None or num is None:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ: /addserver <—Å—Ç—Ä–∞–Ω–∞> <—Ñ–ª–∞–≥> <—Ç–æ–∫–µ–Ω> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
    else:
        if num.isdigit():
            if int(num) >= 1:
                insert_server(name, flag, token, num)
                await message.answer('–°–µ—Ä–≤–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
            else:
                await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
        else:
            await message.answer('–í—ã –Ω–µ –≤—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç—Ç–æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ 0')