from datetime import datetime, timedelta

from vkbottle.bot import BotLabeler, rules
from vkbottle import Keyboard, Text, GroupEventType, GroupTypes

from config import api, state_dispenser, ADMIN_CHAT
from states import ctx, InstructionsData
from database.database import get_user, update_user

donut_labeler = BotLabeler()
donut_labeler.vbml_ignore_case = True
donut_labeler.auto_rules = [rules.PeerRule(from_chat=False)]


@donut_labeler.raw_event(GroupEventType.DONUT_SUBSCRIPTION_CREATE, dataclass=GroupTypes.DonutSubscriptionCreate) # —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async def new_donut_sub(event: GroupTypes.DonutSubscriptionCreate):
    user_id = event.object.user_id # –∞–π–¥–∏ —Ç–æ–≥–æ –∫—Ç–æ –æ—Ñ–æ—Ä–º–∏–ª –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—Éinteger
    amount = event.object.amount # —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –æ–ø–ª–∞—á–µ–Ω–æ –≤ —Ä—É–±–ª—è—Ö integer
    amount_without_fee = event.object.amount_without_fee # —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –æ–ø–ª–∞—á–µ–Ω–æ –±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ float

    # peer id –∏ user id —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π

    user = get_user(user_id)
    end_date = datetime.now() + timedelta(days=365)
    is_new = 1
    if user.end_date is not None:
        if user.end_date > datetime.now():
            is_new = 0
            end_date = user.end_date + timedelta(days=30)
    update_user(id, user.server, user.flag, user.url, user.token, user.access, user.refs, user.ref_balance, user.referal, user.balance, user.is_admin, end_date)

    if is_new:
        ctx.set(user_id, {})
        await state_dispenser.set(user_id, InstructionsData.SERVER)

        keyboard = Keyboard(inline=True)
        keyboard.add(Text('–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è!'))
        
        await api.messages.send(
            peer_id=int(user_id),
            message='‚úÖ–û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª—É—á–∏–ª –æ–ø–ª–∞—Ç—É\n\nüìå–í—ã –≤—Å–µ–≥–æ –≤ –ø–∞—Ä–µ —à–∞–≥–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–∞—à–µ–º—É –ö–ª—É–±—É –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞',
            keyboard=keyboard,
            random_id=0
        )
    
    else:
        await api.messages.send(
            peer_id=int(id),
            message='–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞',
            random_id=0
        )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω —á–∞—Ç—É
    await api.messages.send(
        peer_id=ADMIN_CHAT,
        message=f'[id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –æ–ø–ª–∞—Ç–∏–ª {amount}rub',
        random_id=0
    )


@donut_labeler.raw_event(GroupEventType.DONUT_SUBSCRIPTION_PROLONGED, dataclass=GroupTypes.DonutSubscriptionProlonged)
async def donut_prol(event: GroupTypes.DonutSubscriptionProlonged):
    user_id = event.object.user_id
    amount = event.object.amount
    amount_without_fee = event.object.amount_without_fee


    user = get_user(user_id)
    end_date = datetime.now() + timedelta(days=365)
    is_new = 1
    if user.end_date is not None:
        if user.end_date > datetime.now():
            is_new = 0
            end_date = user.end_date + timedelta(days=30)
    update_user(id, user.server, user.flag, user.url, user.token, user.access, user.refs, user.ref_balance, user.referal, user.balance, user.is_admin, end_date)

    if is_new:
        ctx.set(user_id, {})
        await state_dispenser.set(user_id, InstructionsData.SERVER)

        keyboard = Keyboard(inline=True)
        keyboard.add(Text('–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è!'))
        
        await api.messages.send(
            peer_id=int(user_id),
            message='‚úÖ–û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª—É—á–∏–ª –æ–ø–ª–∞—Ç—É\n\nüìå–í—ã –≤—Å–µ–≥–æ –≤ –ø–∞—Ä–µ —à–∞–≥–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–∞—à–µ–º—É –ö–ª—É–±—É –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞',
            keyboard=keyboard,
            random_id=0
        )
    else:
        await api.messages.send(
            peer_id=user_id,
            message='–í—ã –ø—Ä–æ–¥–ª–∏–ª–∏',
            random_id=0
        )

    await api.messages.send(
        peer_id=ADMIN_CHAT,
        message=f'[id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É',
        random_id=0
    )


@donut_labeler.raw_event(GroupEventType.DONUT_SUBSCRIPTION_CANCELLED, dataclass=GroupTypes.DonutSubscriptionCancelled)
async def donut_cancl(event: GroupTypes.DonutSubscriptionCancelled):
    user_id = event.object.user_id


    await api.messages.send(
        peer_id=user_id,
        message='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É Donut',
        random_id=0
    )

    await api.messages.send(
        peer_id=ADMIN_CHAT,
        message=f'[id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É Donut',
        random_id=0
    )


@donut_labeler.raw_event(GroupEventType.DONUT_SUBSCRIPTION_EXPIRED, dataclass=GroupTypes.DonutSubscriptionExpired)
async def donut_cancl(event: GroupTypes.DonutSubscriptionExpired):
    user_id = event.object.user_id


    await api.messages.send(
        peer_id=user_id,
        message='–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Donut –∏—Å—Ç–µ–∫–ª–∞',
        random_id=0
    )

    await api.messages.send(
        peer_id=ADMIN_CHAT,
        message=f'–£ [id{user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –∏—Å—Ç–µ–∫–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Donut',
        random_id=0
    )